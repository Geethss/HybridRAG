{
  "pdf_3a47f687_employee_data": {
    "schema": {
      "ID": "integer",
      "Name": "string",
      "Age": "integer",
      "City": "string",
      "Occupation": "string",
      "Salary": "currency"
    },
    "description": "## Table Description: `pdf_3a47f687_employee_data`\n\n### 1. Table Metadata\n\n* **Table Name:** `pdf_3a47f687_employee_data`\n* **Table Purpose:** Stores information about employees.\n* **Columns:**\n    * `ID` (INT):  Unique identifier for each employee.  Serves as the primary key.\n    * `Name` (VARCHAR(255)): Employee's full name (text string).\n    * `Age` (INT): Employee's age (whole number).\n    * `City` (VARCHAR(255)): City where the employee resides (text string).\n    * `Occupation` (VARCHAR(255)): Employee's job title or occupation (text string).\n    * `Salary` (FLOAT): Employee's annual salary (numeric, parsed from currency strings like \"$80,000\").\n\n* **Key Identifier Column:** `ID` (primary key)\n\n\n### 2. Sample Data Context\n\nThe sample data shows a small subset of employee records, including their ID, name, age, city of residence, occupation, and annual salary.  The salary values are stored as floating-point numbers after parsing from currency strings (e.g., \"$80,000\" is stored as 80000.0).  The data represents a small sample; the full table contains 10 rows.\n\n* **Data Format:**  The data is structured in a tabular format, with each row representing a single employee.\n* **Typical Values:**  `ID` is a sequential integer; `Name` is a string containing the employee's full name; `Age` is a whole number representing age in years; `City` is a string specifying the employee's city; `Occupation` is a string describing their job; `Salary` is a floating-point number representing their annual salary.\n\n\n### 3. Table Purpose\n\nThis table represents a collection of employee records.  Its primary use case is to store and manage employee information, enabling queries to retrieve specific employee details or perform analyses on the employee data.  The business function served is human resources management, potentially for payroll, reporting, or other HR-related tasks.\n\n\n### 4. Common Query Patterns\n\n* **Retrieve employee information by ID:**  SELECT * FROM `pdf_3a47f687_employee_data` WHERE `ID` = 5;\n* **Find employees in a specific city:** SELECT * FROM `pdf_3a47f687_employee_data` WHERE `City` = 'New York';\n* **Calculate the average salary for a particular occupation:** SELECT AVG(`Salary`) FROM `pdf_3a47f687_employee_data` WHERE `Occupation` = 'Engineer';\n* **Find the oldest employee:** SELECT * FROM `pdf_3a47f687_employee_data` ORDER BY `Age` DESC LIMIT 1;\n\n\n### 5. Data Characteristics\n\n* **Total Number of Records:** 10\n* **Notable Data Patterns/Relationships:**  The data is relatively small and doesn't exhibit complex relationships. The `ID` column serves as a unique identifier for each row, ensuring data integrity. The table has a simple structure; no foreign keys or other complex relationships are apparent from the provided information.  However,  it's possible that  further analysis might reveal patterns in salary distribution based on occupation or location.",
    "file_hash": "3a47f687",
    "created_at": "2025-06-27T17:27:36.603612"
  },
  "pdf_3a47f687_product_inventory": {
    "schema": {
      "Serial No": "integer",
      "Product": "string",
      "Category": "string",
      "Price": "currency",
      "Stock": "integer"
    },
    "description": "## Table Description: `pdf_3a47f687_product_inventory`\n\n### 1. Table Metadata\n\n* **Table Name:** `pdf_3a47f687_product_inventory`\n* **Table Purpose:** This table stores information about a company's product inventory.  It tracks individual products, their categories, prices, and current stock levels.\n* **Columns:**\n    * `Serial No` (INT): A unique sequential identifier for each product entry.  This is implicitly the primary key, though not explicitly defined.\n    * `Product` (VARCHAR(255)): The name of the product.\n    * `Category` (VARCHAR(255)): The category the product belongs to.\n    * `Price` (FLOAT): The price of the product in USD (currency symbols are already parsed).\n    * `Stock` (INT): The number of units currently in stock for the product.\n* **Key Identifier Columns:** `Serial No` acts as the primary key, uniquely identifying each product record.\n\n\n### 2. Sample Data Context\n\nThe sample data shows a small excerpt from the product inventory table.  Each row represents a single product with its associated attributes. The data is neatly structured with consistent data types.\n\n* **Data Format:** Tabular data with each column representing a specific product attribute.\n* **Typical Values:**\n    * `Serial No`:  Sequential integers starting from 1.\n    * `Product`: Strings representing product names (e.g., \"Product 1\", \"Product 96\").\n    * `Category`: Strings representing product categories (e.g., \"Category A\", \"Category B\").\n    * `Price`: Floating-point numbers representing prices in USD (e.g., 10.00, 960.00).\n    * `Stock`: Integer values representing the quantity in stock (e.g., 99, 4).\n\n\n### 3. Table Purpose\n\n* **Represents:** A product catalog with inventory information.\n* **Main Use Case:**  This table is used to manage and track product inventory levels, enabling efficient order fulfillment, stock replenishment, and sales reporting.  It supports various business functions related to inventory control and sales analysis.\n\n\n### 4. Common Query Patterns\n\n* **Query Type 1: Retrieve product information by category:**  This query would involve filtering the table by the `Category` column and selecting other relevant columns (e.g., `Product`, `Price`, `Stock`).  Example: `SELECT Product, Price, Stock FROM pdf_3a47f687_product_inventory WHERE Category = 'Category A';`\n\n* **Query Type 2: Find low-stock products:** This would involve filtering based on the `Stock` column, possibly combined with a threshold value. Example: `SELECT Product, Stock FROM pdf_3a47f687_product_inventory WHERE Stock < 10;`\n\n* **Query Type 3: Calculate the total value of stock for a specific category:** This requires grouping by `Category` and summing the product of `Price` and `Stock`. Example: `SELECT Category, SUM(Price * Stock) AS TotalValue FROM pdf_3a47f687_product_inventory GROUP BY Category;`\n\n\n### 5. Data Characteristics\n\n* **Total Number of Records:** 96\n* **Notable Data Patterns/Relationships:**  The `Serial No` acts as a unique identifier.  There's a clear relationship between `Product`, `Category`, `Price`, and `Stock`.  The data suggests a categorization system for products, allowing for reporting and analysis based on product categories.  No obvious patterns in pricing or stock levels are apparent from the limited sample.",
    "file_hash": "3a47f687",
    "created_at": "2025-06-27T17:27:45.512097"
  },
  "pdf_3a47f687_product_categories": {
    "schema": {
      "product_id": "integer",
      "product_name": "string",
      "category": "string"
    },
    "description": "## Table Description: `pdf_3a47f687_product_categories`\n\n### 1. Table Metadata\n\n* **Table Name:** `pdf_3a47f687_product_categories`\n* **Table Purpose:**  To store information about products and their associated categories.  The naming convention suggests this table might originate from a PDF document processed, and the naming is not particularly descriptive.\n* **Columns:**\n    * `product_id`: `INT` -  A numerical identifier for each product.  The sample data suggests this might not be a consistently formatted ID.\n    * `product_name`: `VARCHAR(255)` - The name of the product.\n    * `category`: `VARCHAR(255)` - The category to which the product belongs.\n* **Key Identifier Columns:** There is no explicitly defined primary key.  `product_id` is a likely candidate, but its integrity based on the sample data is questionable.\n\n\n### 2. Sample Data Context\n\nThe provided sample data is inconsistent and likely reflects an error in data extraction from the source PDF. It contains a mixture of product IDs, product names, and what appears to be pricing information  all within the same columns which is inconsistent across rows.  This makes interpreting the true data format and values challenging. The sample is not representative of the actual, properly structured data this table should hold.\n\n* **Data Format:** The data in the sample appears to be incorrectly structured, mixing different data types within the same row.  The expected format should have a distinct `product_id`, `product_name`, and `category` for each row.\n\n* **Typical Values:** (Based on the assumption that the sample data is faulty)  `product_id` would contain unique integer identifiers. `product_name` would contain textual descriptions of products. `category` would contain textual descriptions of product categories.\n\n### 3. Table Purpose\n\n* **Table Representation:** The intended purpose is to represent a catalog of products and their categorization.\n* **Business Function:** This table would support functionalities such as product lookups by ID or name, retrieval of products within specific categories, and potentially reporting on the number of products in each category.\n\n\n### 4. Common Query Patterns\n\nGiven the corrected data structure, common queries might include:\n\n1. **Retrieve product information by ID:**\n   sql\n   SELECT * FROM pdf_3a47f687_product_categories WHERE product_id = 123;\n   \n\n2. **List all products in a specific category:**\n   sql\n   SELECT product_id, product_name FROM pdf_3a47f687_product_categories WHERE category = 'Electronics';\n   \n\n3. **Count the number of products in each category:**\n   sql\n   SELECT category, COUNT(*) AS product_count FROM pdf_3a47f687_product_categories GROUP BY category;\n   \n\n### 5. Data Characteristics\n\n* **Total Number of Records:** 4 (as stated, but the quality of these records is questionable)\n* **Data Patterns/Relationships:**  The intended relationship is a one-to-many relationship between `category` and `product_id` (many products can belong to one category).  The sample data doesn't reliably reflect this.  The lack of a primary key is a significant issue.  Data cleaning and potentially schema revision is recommended to establish data integrity.\n\n\n**In summary:**  This table needs significant data cleaning and potentially a redesign based on an accurate understanding of the intended data schema. The sample data is misleading and should not be taken as representative.  Once the data is cleaned, queries should be made based on the corrected and complete data.  A primary key needs to be defined for proper database management.",
    "file_hash": "3a47f687",
    "created_at": "2025-06-27T17:27:55.980524"
  }
}