{
  "pdf_8a27b9ae_employee_data": {
    "schema": {
      "ID": "integer",
      "Name": "string",
      "Age": "integer",
      "City": "string",
      "Occupation": "string",
      "Salary": "currency"
    },
    "description": "## Table Description: `pdf_8a27b9ae_employee_data`\n\nThis document provides a comprehensive description of the `pdf_8a27b9ae_employee_data` table to facilitate accurate SQL query generation by an LLM.\n\n\n### 1. Table Metadata\n\n* **Table Name:** `pdf_8a27b9ae_employee_data`\n* **Table Purpose:**  To store information about employees.\n* **Columns:**\n    * `ID` (INT): Unique identifier for each employee record.  Serves as the primary key.\n    * `Name` (VARCHAR(255)): Employee's full name.\n    * `Age` (INT): Employee's age in years.\n    * `City` (VARCHAR(255)): City where the employee resides.\n    * `Occupation` (VARCHAR(255)): Employee's job title or occupation.\n    * `Salary` (FLOAT): Employee's annual salary (parsed from currency strings, e.g., \"$80,000\").\n* **Key Identifier Columns:** `ID` (Primary Key)\n\n\n### 2. Sample Data Context\n\nThe sample data shows a small subset (10 rows) of employee records. Each row represents a single employee with their ID, name, age, city of residence, occupation, and annual salary.  The salary is stored as a floating-point number after currency symbol removal and parsing.\n\n* **Data Format:**  Each column holds data of the specified type.  `Salary` is a floating-point number representing the annual salary, originally in the format \"$XXX,XXX\".\n* **Typical Values:**  `ID` is a sequential integer.  `Name` contains strings. `Age` contains positive integers representing ages. `City` and `Occupation` contain text strings. `Salary` contains positive floating-point numbers.\n\n\n### 3. Table Purpose\n\n* **Table Representation:** This table represents a list of employees and their associated attributes.\n* **Main Use Case:**  The primary use case is to store and retrieve employee information for various reporting, analysis, and operational needs (e.g., payroll, HR management, compensation analysis).\n\n\n### 4. Common Query Patterns\n\n* **Retrieve Employee Information:**  Selecting specific employee details based on ID, name, or other criteria (e.g., `SELECT * FROM pdf_8a27b9ae_employee_data WHERE ID = 5;` or `SELECT Name, Salary FROM pdf_8a27b9ae_employee_data WHERE City = 'New York';`).\n* **Aggregate Statistics:** Calculating summary statistics, such as average salary, maximum age, or number of employees in a specific city (e.g., `SELECT AVG(Salary) FROM pdf_8a27b9ae_employee_data;` or `SELECT COUNT(*) FROM pdf_8a27b9ae_employee_data WHERE Occupation = 'Engineer';`).\n* **Filtering and Sorting:** Retrieving employees matching specific criteria and sorting the results (e.g., `SELECT * FROM pdf_8a27b9ae_employee_data WHERE Age > 30 ORDER BY Salary DESC;`).\n\n\n### 5. Data Characteristics\n\n* **Total Number of Records:** 10 (in the sample; the actual number may be larger).\n* **Notable Data Patterns:** The data shows a variety of occupations and salaries. There is no immediately apparent correlation between age and salary, though further analysis might reveal patterns.  The `ID` column is sequentially numbered, suggesting an insertion order.  There's no information on potential relationships with other tables (e.g., a department table).",
    "pdf_uuid": "8a27b9ae",
    "created_at": "2025-06-28T18:31:14.345031",
    "status": "complete",
    "rows_stored": 10
  },
  "pdf_8a27b9ae_product_inventory": {
    "schema": {
      "Serial No": "integer",
      "Product": "string",
      "Category": "string",
      "Price": "currency",
      "Stock": "integer"
    },
    "description": "## Table Description: `pdf_8a27b9ae_product_inventory`\n\n### 1. Table Metadata\n\n* **Table Name:** `pdf_8a27b9ae_product_inventory`\n* **Table Purpose:** This table stores information about products in an inventory.\n* **Column Names and Data Types:**\n    * `Serial No` (INT):  A unique sequential identifier for each product entry.  This is implicitly a primary key.\n    * `Product` (VARCHAR(255)): The name of the product.\n    * `Category` (VARCHAR(255)): The category the product belongs to.\n    * `Price` (FLOAT): The price of the product (parsed from currency symbols, likely including the dollar sign '$' in the source data).\n    * `Stock` (INT): The number of units currently in stock.\n\n* **Key Identifier Columns:** `Serial No` acts as the primary key, uniquely identifying each product record.\n\n\n### 2. Sample Data Context\n\nThe sample data shows a small excerpt from a product inventory.  Each row represents a single product with its serial number, name, category, price, and stock quantity. The provided `Price` column already has currency symbols removed and converted to a numerical value.\n\n* **Data Format:**  The data is structured in a tabular format with each column representing an attribute of a product.\n* **Typical Values:**\n    * `Serial No`: Sequential integers starting from 1.\n    * `Product`:  String values representing product names (e.g., \"Product 1\", \"Product 96\").\n    * `Category`: String values representing product categories (e.g., \"Category A\", \"Category B\").\n    * `Price`: Floating-point numbers representing the price of each product.\n    * `Stock`: Integer values representing the quantity of each product in stock.\n\n\n### 3. Table Purpose\n\n* **What this table represents:**  A product catalog with inventory levels.\n* **Main use case or business function:** This table supports inventory management, allowing for tracking of product details, prices, and stock levels.  It is crucial for tasks such as order fulfillment, stock replenishment, and sales reporting.\n\n\n### 4. Common Query Patterns\n\n* **Query Type 1: Retrieving product information:**  Select specific product details (e.g., name, price, stock) based on criteria like product name or category.  Example:  `SELECT Product, Price, Stock FROM pdf_8a27b9ae_product_inventory WHERE Category = 'Category A';`\n* **Query Type 2:  Finding low-stock items:** Identify products with stock levels below a certain threshold. Example: `SELECT Product, Stock FROM pdf_8a27b9ae_product_inventory WHERE Stock < 10;`\n* **Query Type 3: Calculating total value of inventory:** Aggregate the value of all products in stock. Example: `SELECT SUM(Price * Stock) AS TotalInventoryValue FROM pdf_8a27b9ae_product_inventory;`\n\n\n### 5. Data Characteristics\n\n* **Total number of records:** 96\n* **Notable data patterns or relationships:** The `Serial No` acts as a unique identifier.  There's a likely relationship with other tables (potentially sales data or order tables) that would use the `Product` or `Serial No` as a foreign key for linking information about sales or orders related to each specific product.  The distribution of products across categories isn't known without further analysis, which might reveal meaningful patterns.  It's assumed that `Price` values are consistently positive.",
    "pdf_uuid": "8a27b9ae",
    "created_at": "2025-06-28T18:31:23.254898",
    "status": "complete",
    "rows_stored": 96
  },
  "pdf_8a27b9ae_product_categories": {
    "schema": {
      "product_id": "integer",
      "product_name": "string",
      "category": "string"
    },
    "description": "## Table Description: `pdf_8a27b9ae_product_categories`\n\n### 1. Table Metadata\n\n* **Table Name:** `pdf_8a27b9ae_product_categories`\n* **Table Purpose:**  This table is intended to store information about product categories. However, the provided sample data suggests significant data inconsistencies and a flawed design.  The intended purpose is unclear from the sample data and likely requires correction.\n* **Columns:**\n    * `product_id`: INT (Whole numbers).  Intended to uniquely identify a product.  The sample data shows this is not working as intended.\n    * `product_name`: VARCHAR(255) (Text data). Intended to store the name of a product. The sample data contains values that are not product names.\n    * `category`: VARCHAR(255) (Text data). Intended to store the category to which a product belongs. The sample data contains values that are not product categories.\n* **Key Identifier Columns:**  Ideally, `product_id` should be the primary key, uniquely identifying each product.  However, based on the sample data, this is not currently enforced.\n\n\n### 2. Sample Data Context\n\nThe provided sample data is highly problematic and inconsistent. It doesn't represent a coherent relationship between product IDs, names, and categories. The rows seem to contain different types of data intermingled:\n\n* **Row 1:** Appears to be attempting to assign product IDs (but uses non-numeric 'Product' prefix).\n* **Row 2:** Appears to be attempting to assign category names.\n* **Row 3:** Contains currency values, which are inappropriate for product IDs or names.\n* **Row 4:** Contains numerical data that *could* represent product IDs, but lacks names and categories.\n\nThe data format is inconsistent, mixing strings, numbers, and currency symbols, resulting in a table that is unusable in its current state.\n\n### 3. Table Purpose (Corrected based on intended schema)\n\n**Intended Purpose (Based on Schema):**  This table *should* represent a catalog of products and their associated categories.  It aims to link each product with a specific category for organization and analysis.\n\n**Main Use Case (Ideal):** The main use cases would involve retrieving product information based on ID or category, analyzing product distributions across categories, and potentially joining with other tables (e.g., a sales table) for reporting purposes.\n\n### 4. Common Query Patterns (Ideal, based on corrected table)\n\nThe following queries would be useful *if* the data were cleaned and consistent:\n\n1. **Retrieve products in a specific category:**\n   sql\n   SELECT product_id, product_name\n   FROM pdf_8a27b9ae_product_categories\n   WHERE category = 'Category A';\n   \n\n2. **Count products per category:**\n   sql\n   SELECT category, COUNT(*) AS product_count\n   FROM pdf_8a27b9ae_product_categories\n   GROUP BY category;\n   \n\n3. **Find product details by ID:**\n   sql\n   SELECT product_name, category\n   FROM pdf_8a27b9ae_product_categories\n   WHERE product_id = 123;\n   \n\n\n### 5. Data Characteristics\n\n* **Total Number of Records:** 4 (Currently). This is extremely low for a real-world product catalog.\n* **Notable Data Patterns/Relationships:** Currently, there are no meaningful patterns or relationships due to the inconsistent data.  Ideally, a one-to-many relationship would exist between `product_id` and rows in other tables (e.g., sales data, inventory).  A one-to-one relationship between `product_id` and `product_name` should also exist.\n\n\n**Conclusion:** This table requires significant data correction and cleaning before it can be effectively used. The sample data prevents accurate query generation.  The LLM should be alerted to the data quality issues and potentially prompted to assist in data cleaning or reconstruction before generating queries.  A primary key constraint needs to be added on the `product_id` column.",
    "pdf_uuid": "8a27b9ae",
    "created_at": "2025-06-28T18:31:33.841909",
    "status": "complete",
    "rows_stored": 4
  },
  "pdf_36e26f07_employee_data": {
    "schema": {
      "ID": "integer",
      "Name": "string",
      "Age": "integer",
      "City": "string",
      "Occupation": "string",
      "Salary": "currency"
    },
    "description": "## Table Description: `pdf_36e26f07_employee_data`\n\nThis document provides a comprehensive description of the `pdf_36e26f07_employee_data` table to facilitate accurate SQL query generation by an LLM.\n\n### 1. Table Metadata\n\n* **Table Name:** `pdf_36e26f07_employee_data`\n* **Table Purpose:** To store information about employees.\n* **Columns:**\n    * `ID` (INT): Unique identifier for each employee record.  Acts as the primary key.\n    * `Name` (VARCHAR(255)): Employee's full name (text).\n    * `Age` (INT): Employee's age (whole number).\n    * `City` (VARCHAR(255)): City where the employee resides (text).\n    * `Occupation` (VARCHAR(255)): Employee's job title or occupation (text).\n    * `Salary` (FLOAT): Employee's annual salary (numerical value, parsed from currency format like \"$80,000\").\n* **Key Identifier Column:** `ID` (Primary Key)\n\n\n### 2. Sample Data Context\n\nThe sample data provides a small subset of employee records, illustrating the structure and typical values stored in the table.  The data includes employee IDs, names, ages, cities of residence, occupations, and annual salaries.  Salaries are stored as numerical values after parsing currency symbols (e.g., \"$80,000\" is stored as 80000.0).\n\nData Format:  The data is structured in a tabular format with each row representing a single employee.\n\n\n### 3. Table Purpose\n\n* **What it represents:** This table represents a collection of employee records, storing essential information about each employee within the organization.\n* **Main use case:**  The primary purpose is to manage and query employee information for various HR and business analytics purposes, such as generating reports, identifying employee demographics, and analyzing salary distributions.\n\n\n### 4. Common Query Patterns\n\nThe following are examples of typical queries that would be performed on this table:\n\n1. **Retrieve employee information based on criteria:**  For example, selecting all employees who live in \"New York\" and are \"Engineers\":\n   sql\n   SELECT * FROM pdf_36e26f07_employee_data WHERE City = 'New York' AND Occupation = 'Engineer';\n   \n\n2. **Calculate aggregate statistics:** For example, calculating the average salary of all employees:\n   sql\n   SELECT AVG(Salary) AS AverageSalary FROM pdf_36e26f07_employee_data;\n   \n\n3. **Group data by category:** For example, finding the average salary for each occupation:\n   sql\n   SELECT Occupation, AVG(Salary) AS AverageSalary FROM pdf_36e26f07_employee_data GROUP BY Occupation;\n   \n\n\n### 5. Data Characteristics\n\n* **Total number of records:** 10 (as stated, but this is likely a small sample; the actual table may contain significantly more records).\n* **Notable data patterns or relationships:**  The data shows a variety of occupations and salary ranges.  No obvious relationships beyond the primary key are evident from this small sample.  Further analysis on a larger dataset would be needed to identify any correlations between variables (e.g., age and salary, city and occupation).  There is no explicit foreign key relationship visible in this data.",
    "pdf_uuid": "36e26f07",
    "created_at": "2025-06-28T18:49:33.729463",
    "status": "complete",
    "rows_stored": 10
  },
  "pdf_36e26f07_product_inventory": {
    "schema": {
      "Serial No": "integer",
      "Product": "string",
      "Category": "string",
      "Price": "currency",
      "Stock": "integer"
    },
    "description": "## Table Description: `pdf_36e26f07_product_inventory`\n\n### 1. Table Metadata\n\n* **Table Name:** `pdf_36e26f07_product_inventory`\n* **Table Purpose:** This table stores information about a company's product inventory.  It tracks product details, their categories, prices, and current stock levels.\n* **Column Names and Data Types:**\n    * `Serial No` (INT):  A unique serial number identifying each product entry.  This is likely the primary key.\n    * `Product` (VARCHAR(255)): The name of the product.\n    * `Category` (VARCHAR(255)): The category to which the product belongs.\n    * `Price` (FLOAT): The price of the product (numerical value, currency symbols are assumed to be removed during data import).\n    * `Stock` (INT): The number of units currently in stock.\n\n* **Key Identifier Columns:** `Serial No` is the primary key, uniquely identifying each row.\n\n\n### 2. Sample Data Context\n\nThe sample data shows a portion of the product inventory, listing each product with its serial number, name, category, price, and stock quantity.  The data is structured in a tabular format, with each row representing a single product.  The `Price` column contains numerical values that represent monetary amounts (currency symbols are presumed to have been parsed out). The `Serial No` seems to be sequentially assigned.\n\n* **Data Format:** Tabular data with numerical and text fields.\n* **Typical Values:** `Serial No` (1-96 in the sample), `Product` (string descriptions like \"Product 1\", \"Product 2\"), `Category` (string categories like \"Category A\", \"Category B\"), `Price` (floating-point numbers representing monetary values), `Stock` (integer representing inventory quantity).\n\n\n### 3. Table Purpose\n\n* **Table Representation:**  This table represents a product catalog with inventory tracking.\n* **Main Use Case/Business Function:** To manage and track the company's product inventory, enabling tasks such as stock level monitoring, pricing updates, sales reporting, and inventory analysis.\n\n\n### 4. Common Query Patterns\n\n* **Query Type 1: Retrieving product information by category:**  `SELECT * FROM pdf_36e26f07_product_inventory WHERE Category = 'Category A';`\n* **Query Type 2: Finding products below a certain stock threshold:** `SELECT Product, Stock FROM pdf_36e26f07_product_inventory WHERE Stock < 10;`\n* **Query Type 3: Calculating the total value of stock for a specific category:** `SELECT SUM(Price * Stock) AS TotalValue FROM pdf_36e26f07_product_inventory WHERE Category = 'Category B';`\n\n\n### 5. Data Characteristics\n\n* **Total Number of Records:** 96\n* **Notable Data Patterns/Relationships:** The `Serial No` seems to be sequentially assigned.  There's a likely relationship between categories and products (many products might belong to the same category), but this would need to be verified by examining the full dataset.  It's expected that the `Stock` values will fluctuate over time.  There is no obvious relationship between the serial number and the product or its price.\n\n\nThis detailed description should allow an LLM to understand the `pdf_36e26f07_product_inventory` table's structure, data, purpose, and typical usage for generating accurate SQL queries.",
    "pdf_uuid": "36e26f07",
    "created_at": "2025-06-28T18:49:41.838616",
    "status": "complete",
    "rows_stored": 96
  },
  "pdf_36e26f07_product_categories": {
    "schema": {
      "product_id": "integer",
      "product_name": "string",
      "category": "string"
    },
    "description": "## Table Description: `pdf_36e26f07_product_categories`\n\nThis document describes the `pdf_36e26f07_product_categories` table to facilitate accurate SQL query generation by an LLM.  The provided sample data is flawed and doesn't reflect a proper structure for product categories. We will assume the intention behind the table and correct the sample data interpretation accordingly.\n\n### 1. Table Metadata\n\n* **Table Name:** `pdf_36e26f07_product_categories`\n* **Table Purpose:** To store the categorization of products.  Each row represents a unique product and its assigned category.\n* **Columns:**\n    * `product_id` (INT):  Unique identifier for each product.  This is likely the primary key.\n    * `product_name` (VARCHAR(255)):  Name of the product.\n    * `category` (VARCHAR(255)):  Category to which the product belongs.\n\n\n### 2. Sample Data Context\n\nThe provided sample data is inconsistent and erroneous.  It appears to be a mixture of product IDs, names, and potentially prices.  We'll assume the intent was to represent the following:\n\n**Corrected Sample Data Interpretation:**\n\n| product_id | product_name | category     |\n|------------|---------------|---------------|\n| 1          | Product A     | Category X   |\n| 2          | Product B     | Category Y   |\n| 3          | Product C     | Category X   |\n| 4          | Product D     | Category Z   |\n\n\nThe corrected sample data shows a straightforward mapping between `product_id`, `product_name`, and `category`.  Data format is consistent with the column types.  `product_id` is numeric, and `product_name` and `category` are text strings.\n\n### 3. Table Purpose\n\n* **Representation:** This table represents a product catalog organized by categories.\n* **Use Case:**  This table is used to retrieve product information based on product ID, product name, or category. It supports querying for all products in a specific category, finding the category of a specific product, or retrieving all product details.\n\n### 4. Common Query Patterns\n\n* **Find products in a specific category:**  `SELECT * FROM pdf_36e26f07_product_categories WHERE category = 'Category X';`\n* **Retrieve product information by ID:** `SELECT * FROM pdf_36e26f07_product_categories WHERE product_id = 3;`\n* **Count products per category:** `SELECT category, COUNT(*) AS product_count FROM pdf_36e26f07_product_categories GROUP BY category;`\n\n### 5. Data Characteristics\n\n* **Total Records:** 4 (as stated, but likely to be much larger in a real-world application)\n* **Data Patterns/Relationships:**  The table has a one-to-one or one-to-many relationship between `product_id` and other columns (assuming `product_id` is a primary key, which is likely).  The `category` column will have repeating values.\n\n\nThis detailed description should enable an LLM to generate accurate SQL queries against the `pdf_36e26f07_product_categories` table.  The clarification of the flawed sample data is crucial for correct interpretation.",
    "pdf_uuid": "36e26f07",
    "created_at": "2025-06-28T18:49:52.573041",
    "status": "complete",
    "rows_stored": 4
  },
  "pdf_f461e5ff_employee_data": {
    "schema": {
      "ID": "integer",
      "Name": "string",
      "Age": "integer",
      "City": "string",
      "Occupation": "string",
      "Salary": "currency"
    },
    "description": "## Table Description: `pdf_f461e5ff_employee_data`\n\n### 1. Table Metadata\n\n* **Table Name:** `pdf_f461e5ff_employee_data`\n* **Table Purpose:** This table stores basic demographic and employment information for a small number of employees.\n* **Columns:**\n    * `ID` (INT):  Unique identifier for each employee record.  Serves as the primary key.\n    * `Name` (VARCHAR(255)): Employee's full name (e.g., \"Alice Smith\").\n    * `Age` (INT): Employee's age in years (whole numbers).\n    * `City` (VARCHAR(255)): City where the employee resides.\n    * `Occupation` (VARCHAR(255)): Employee's job title or profession.\n    * `Salary` (FLOAT): Employee's annual salary, parsed from currency values (e.g., \"$80,000\" is stored as 80000.0).\n* **Key Identifier Column:** `ID` (Primary Key)\n\n\n### 2. Sample Data Context\n\nThe sample data shows a small subset (10 rows) of employee records. Each row represents a single employee with their name, age, city of residence, occupation, and annual salary.  The salary is stored as a floating-point number after currency symbol removal.  Data values are relatively straightforward and represent typical employee information.\n\n### 3. Table Purpose\n\nThis table represents a register of employee records, containing key information about a limited number of employees. Its main use case is for basic employee data retrieval and analysis within a small organization or for a specific project.\n\n### 4. Common Query Patterns\n\n* **Retrieve employee information based on criteria:**  For example, finding all employees who live in \"New York\" (`WHERE City = 'New York'`).\n* **Calculate aggregate statistics:**  For example, finding the average salary of all employees (`SELECT AVG(Salary)`), or the number of employees in each city (`GROUP BY City`).\n* **Retrieve specific employee data:**  For example, retrieving the salary of a specific employee based on their ID  (`WHERE ID = 1`).\n\n\n### 5. Data Characteristics\n\n* **Total Number of Records:** 10\n* **Notable Data Patterns:** The data is limited, preventing the identification of strong patterns or relationships.  The sample suggests a diverse range of occupations and salaries. The table's small size limits the possibilities for statistical analysis.  Data is likely extracted from a PDF document based on the table name.\n\n**In summary:** This table is suitable for simple queries related to a small employee dataset.  Complex joins with other tables are unlikely given the limited scope of the data.  Queries should focus on filtering, selecting specific columns, and basic aggregation.  The `ID` column should be used for precise record selection.  The small size of the table makes it suitable for quick lookups and basic reporting but not large-scale analysis.",
    "pdf_uuid": "f461e5ff",
    "created_at": "2025-06-28T18:51:10.394492",
    "status": "complete",
    "rows_stored": 10
  },
  "pdf_f461e5ff_product_inventory": {
    "schema": {
      "Serial No": "integer",
      "Product": "string",
      "Category": "string",
      "Price": "currency",
      "Stock": "integer"
    },
    "description": "## Table Description: `pdf_f461e5ff_product_inventory`\n\n### 1. Table Metadata\n\n* **Table Name:** `pdf_f461e5ff_product_inventory`\n* **Table Purpose:** This table stores information about a company's product inventory.  It tracks individual products, their categories, prices, and current stock levels.\n* **Column Names and Data Types:**\n    * `Serial No` (INT): A unique serial number identifying each product record.  This is implicitly the primary key, though not explicitly defined as such.\n    * `Product` (VARCHAR(255)): The name of the product.\n    * `Category` (VARCHAR(255)): The category the product belongs to.\n    * `Price` (FLOAT): The price of the product.  Note that this is a floating-point number representing the numerical value after parsing currency symbols (e.g., \"$10.00\" becomes 10.00).\n    * `Stock` (INT): The current number of units in stock for the product.\n\n\n### 2. Sample Data Context\n\nThe sample data represents a small subset (96 rows) of the company's product inventory.  Each row corresponds to a single product. The data shows a diverse range of products categorized into different groups (Category A, B, C, D etc.) with varying prices and stock quantities.\n\n* **Data Format:**  Each column is clearly defined with consistent data types.  The `Price` column is represented as a numeric value after currency symbol removal.\n* **Typical Values:** `Serial No` is sequential; `Product` names are likely descriptive; `Category` values are categorical; `Price` values are positive floating-point numbers; `Stock` values are non-negative integers.\n\n\n### 3. Table Purpose\n\n* **What this table represents:**  A product catalog with inventory information.\n* **Main use case or business function:** This table is crucial for inventory management, order fulfillment, sales reporting, and pricing analysis.  It allows tracking of stock levels, identifying low-stock items, generating reports on sales revenue based on product categories, and making informed decisions about pricing strategies.\n\n\n### 4. Common Query Patterns\n\n* **Query Type 1: Retrieving product information based on criteria:**  For example, find all products in \"Category A\" with a price greater than $50.\n* **Query Type 2:  Aggregating inventory data:** For example, calculate the total value of all products in stock (Price * Stock).\n* **Query Type 3: Identifying low-stock items:** For example, find all products with fewer than 10 units in stock.\n\n\n### 5. Data Characteristics\n\n* **Total Number of Records:** 96 (as stated, though the actual number might vary)\n* **Notable Data Patterns or Relationships:**  The `Serial No` acts as a unique identifier. No explicit relationships to other tables are mentioned, but it's likely there would be linked tables such as sales data or customer orders.  There may be implicit relationships between categories and products, suggesting a possible need for normalization in a larger database design.  The data distribution of prices and stock levels might reveal further patterns through analysis.\n\n\nThis comprehensive description will allow an LLM to understand the structure, content, and purpose of the `pdf_f461e5ff_product_inventory` table and generate accurate and relevant SQL queries against it.",
    "pdf_uuid": "f461e5ff",
    "created_at": "2025-06-28T18:51:18.378236",
    "status": "complete",
    "rows_stored": 96
  },
  "pdf_f461e5ff_product_categories": {
    "schema": {
      "Product ID": "integer",
      "Product Name": "string",
      "Category": "string"
    },
    "description": "## Table Description: `pdf_f461e5ff_product_categories`\n\nThis document describes the `pdf_f461e5ff_product_categories` table, providing metadata, sample data context, table purpose, common query patterns, and data characteristics to aid in accurate SQL query generation.\n\n\n### 1. Table Metadata\n\n* **Table Name:** `pdf_f461e5ff_product_categories`\n* **Table Purpose:**  This table appears to be intended to categorize products.  However, the sample data is inconsistent and flawed, suggesting potential data entry errors or a misunderstanding of the table's schema.  A proper schema would likely use separate columns for product ID, name, and category.\n* **Columns:**\n    * `Product ID`: `INT` -  Intended to uniquely identify a product.  The sample data contains non-numeric values, indicating an error.\n    * `Product Name`: `VARCHAR(255)` -  Intended to store the name of the product. The sample data is inconsistent and contains values that are neither product names nor a consistent format.\n    * `Category`: `VARCHAR(255)` - Intended to store the category the product belongs to. The sample data contains inconsistent values.\n* **Key Identifier Columns:**  While `Product ID` is *intended* to be the key, the sample data invalidates this.  The table structure needs correction before a true primary key can be defined.\n\n\n### 2. Sample Data Context\n\nThe provided sample data is inconsistent and erroneous. It does not adhere to the defined column data types.  Instead of a well-structured three rows of product data, it contains four rows with mixed data types:\n\n* **Row 1:**  Appears to be labels for the columns.\n* **Row 2:**  Appears to be category names.\n* **Row 3:**  Appears to be monetary values (likely prices).\n* **Row 4:**  Appears to be numerical values (possibly counts).\n\nThis suggests a significant data entry or design error.  The sample data is unusable in its current form for accurate representation of the intended table structure.\n\n\n### 3. Table Purpose (Inferred from intended schema)\n\nBased on the intended schema (Product ID, Product Name, Category), this table is intended to represent a product catalog, mapping each product to its respective category.  The main use case would be to retrieve product information based on its ID or category, or to list products within a specific category.\n\n\n### 4. Common Query Patterns (Based on corrected schema)\n\nAssuming the table is corrected to have consistent data, the following query patterns would be common:\n\n1. **Retrieve product information by ID:**  `SELECT * FROM pdf_f461e5ff_product_categories WHERE Product_ID = 123;`\n2. **List all products in a specific category:** `SELECT * FROM pdf_f461e5ff_product_categories WHERE Category = 'Electronics';`\n3. **Count products in each category:** `SELECT Category, COUNT(*) FROM pdf_f461e5ff_product_categories GROUP BY Category;`\n\n\n### 5. Data Characteristics\n\n* **Total Number of Records:** 4 (in the sample data; this is erroneous and not representative of a properly populated table).\n* **Data Patterns/Relationships:**  The intended relationship is one-to-many (one category can have many products). The sample data does not show this relationship accurately. The provided sample data is highly inconsistent and unreliable for determining data patterns or characteristics.  Further data is needed to assess actual data patterns.\n\n**Conclusion:**\n\nThe `pdf_f461e5ff_product_categories` table, as represented by the sample data, is severely flawed.  The data needs to be corrected and properly structured according to the intended schema before it can be reliably used for query generation.  The description above provides an interpretation of the *intended* schema and its likely usage, but emphasizes the need for data correction.",
    "pdf_uuid": "f461e5ff",
    "created_at": "2025-06-28T18:51:27.598332",
    "status": "complete",
    "rows_stored": 4
  },
  "pdf_e9b330d7_employee_information": {
    "schema": {
      "ID": "integer",
      "Name": "string",
      "Age": "integer",
      "City": "string",
      "Occupation": "string",
      "Salary": "currency"
    },
    "description": "## Table Description: `pdf_e9b330d7_employee_information`\n\nThis document describes the `pdf_e9b330d7_employee_information` table, providing metadata, sample data context, table purpose, common query patterns, and data characteristics to facilitate accurate SQL query generation by an LLM.\n\n\n### 1. Table Metadata\n\n* **Table Name:** `pdf_e9b330d7_employee_information`\n* **Table Purpose:** Stores basic information about employees.\n* **Columns:**\n    * `ID`: `INT` (Primary Key) - Unique identifier for each employee.\n    * `Name`: `VARCHAR(255)` - Employee's full name.\n    * `Age`: `INT` - Employee's age in years.\n    * `City`: `VARCHAR(255)` - City where the employee resides.\n    * `Occupation`: `VARCHAR(255)` - Employee's job title or occupation.\n    * `Salary`: `FLOAT` - Employee's annual salary (stored as a float after parsing from a currency format like \"$80,000\").\n* **Key Identifier Column:** `ID` (Primary Key)\n\n\n### 2. Sample Data Context\n\nThe sample data provides a small subset of employee records, illustrating the structure and typical values within the table.  The `Salary` column is notable for having been parsed from a string representation containing currency symbols.  The data is relatively clean and consistent, with no apparent missing or erroneous values in the example. The data types accurately reflect the information contained.\n\n\n### 3. Table Purpose\n\nThis table represents a collection of employee records, containing essential information about each employee.  Its primary use case is to maintain and query employee data for various reporting and analytical purposes within a business context.\n\n\n### 4. Common Query Patterns\n\nThis table would be frequently used for queries such as:\n\n1. **Retrieving employee information based on specific criteria:**  For example, finding all engineers in New York (`WHERE Occupation = 'Engineer' AND City = 'New York'`).\n2. **Aggregating salary data:**  For example, calculating the average salary of all employees (`SELECT AVG(Salary)`), or the total salary expenditure for a specific occupation (`SELECT SUM(Salary) FROM pdf_e9b330d7_employee_information WHERE Occupation = 'Teacher'`).\n3. **Filtering and sorting employee data:** For example, retrieving the names and ages of all employees older than 30, sorted by age in descending order (`SELECT Name, Age FROM pdf_e9b330d7_employee_information WHERE Age > 30 ORDER BY Age DESC`).\n\n\n### 5. Data Characteristics\n\n* **Total Number of Records:** 10 (as per the provided information, this may be a small subset of the actual data).\n* **Notable Data Patterns:** The data appears to be relatively uniform, with no immediately apparent patterns or relationships other than the standard connections between employee attributes (e.g., name, age, occupation).  The small sample size prevents robust analysis of potential relationships.  Further analysis would be needed with a larger dataset to confirm any potential patterns or correlations.\n\nThis comprehensive description should enable an LLM to accurately understand the `pdf_e9b330d7_employee_information` table's structure, content, and typical usage, leading to more accurate SQL query generation.",
    "pdf_uuid": "e9b330d7",
    "created_at": "2025-06-28T18:52:48.292917",
    "status": "complete",
    "rows_stored": 10
  },
  "pdf_e9b330d7_product_inventory": {
    "schema": {
      "Serial No": "integer",
      "Product": "string",
      "Category": "string",
      "Price": "currency",
      "Stock": "integer"
    },
    "description": "## Table Description: `pdf_e9b330d7_product_inventory`\n\nThis document provides a comprehensive description of the `pdf_e9b330d7_product_inventory` table to facilitate accurate SQL query generation by an LLM.\n\n### 1. Table Metadata\n\n* **Table Name:** `pdf_e9b330d7_product_inventory`\n* **Table Purpose:** Stores information about products in an inventory.\n* **Columns:**\n    * `Serial No` (INT): A unique serial number identifying each product entry.  This is implicitly the primary key.\n    * `Product` (VARCHAR(255)): The name of the product.\n    * `Category` (VARCHAR(255)): The category the product belongs to.\n    * `Price` (FLOAT): The price of the product (monetary value, likely originally represented with currency symbols).\n    * `Stock` (INT): The current stock quantity of the product.\n\n* **Key Identifier Columns:** `Serial No` (Primary Key)\n\n\n### 2. Sample Data Context\n\nThe sample data represents a subset of the product inventory, showing the serial number, product name, category, price, and stock quantity for each product.  The data is organized in a tabular format with each row representing a unique product.\n\n* **Data Format:**  Structured data with each column containing a specific data type.\n* **Typical Values:**\n    * `Serial No`: Sequential integer values starting from 1.\n    * `Product`:  String values representing product names (e.g., \"Product 1\", \"Product 2\").\n    * `Category`: String values representing product categories (e.g., \"Category A\", \"Category B\").\n    * `Price`: Floating-point numbers representing prices (e.g., 10.00, 20.00).\n    * `Stock`: Integer values representing the quantity in stock (e.g., 99, 98).\n\n\n### 3. Table Purpose\n\n* **Represents:** A product catalog and inventory level tracking system.\n* **Main Use Case:**  Provides a centralized database for managing product information, including tracking stock levels and pricing.  This data could be used for inventory management, sales reporting, and pricing analysis.\n\n\n### 4. Common Query Patterns\n\n* **Retrieve product information:**  Selecting specific product details (name, price, stock) based on criteria like category or serial number.  `SELECT Product, Price, Stock FROM pdf_e9b330d7_product_inventory WHERE Category = 'Category A';`\n* **Inventory analysis:** Calculating the total value of stock for specific categories or the total stock across all products. `SELECT SUM(Price * Stock) AS TotalValue FROM pdf_e9b330d7_product_inventory WHERE Category = 'Category B';`\n* **Low stock alerts:** Identifying products with stock levels below a certain threshold. `SELECT Product, Stock FROM pdf_e9b330d7_product_inventory WHERE Stock < 10;`\n\n\n### 5. Data Characteristics\n\n* **Total Number of Records:** 96\n* **Notable Data Patterns:** The `Serial No` appears to be sequentially assigned.  There might be implicit relationships between categories and the frequency of products within those categories, which would require further analysis.  No explicit relationships to other tables are described.\n\n\nThis detailed description should enable an LLM to effectively understand the `pdf_e9b330d7_product_inventory` table and generate accurate SQL queries based on user requests.",
    "pdf_uuid": "e9b330d7",
    "created_at": "2025-06-28T18:52:57.094688",
    "status": "complete",
    "rows_stored": 96
  },
  "pdf_e9b330d7_product_category": {
    "schema": {
      "product_id": "integer",
      "product_name": "string",
      "category": "string"
    },
    "description": "## Table Description: `pdf_e9b330d7_product_category`\n\nThis document describes the `pdf_e9b330d7_product_category` table to facilitate accurate SQL query generation by an LLM.  The table name suggests it relates product IDs to their categories, though the sample data reveals inconsistencies requiring clarification.\n\n### 1. Table Metadata\n\n* **Table Name:** `pdf_e9b330d7_product_category`\n* **Table Purpose:**  To store the relationship between product IDs and their corresponding categories.  However, the sample data indicates potential data quality issues and inconsistencies in data types.  The actual purpose needs further investigation and potential data cleaning.\n* **Columns:**\n    * `product_id`: INT (Whole numbers representing product identifiers.  The sample data suggests it might be a flawed representation, containing non-numeric values).\n    * `product_name`: VARCHAR(255) (Text data representing product names. The sample data contains strings that aren't likely to be valid product names).\n    * `category`: VARCHAR(255) (Text data representing product categories. The sample data shows potential data issues).\n* **Key Identifier Columns:**  None explicitly defined.  `product_id` is a strong candidate, but the data inconsistencies make it unreliable until cleaned.  A primary key would need to be added to ensure data integrity.\n\n### 2. Sample Data Context\n\nThe provided sample data is flawed and inconsistent. It appears to contain a mixture of what might be intended as product identifiers, names, categories, and prices, all within the same row.  This strongly suggests data entry or schema design errors.\n\n* **Data Format:** The sample data shows three columns, with values separated by tabs.\n* **Typical Values (intended):** `product_id` should be unique integers, `product_name` should be strings, and `category` should be strings representing product categories.\n\n### 3. Table Purpose (Corrected Interpretation)\n\nThe intended purpose of this table is likely to maintain a catalog of products and their associated categories. Each row should represent a unique product with its ID, name, and category.  However, based on the current state, data cleaning and schema correction are required.\n\n* **Main Use Case:**  Retrieving product information based on ID or category, associating products with specific categories, possibly for inventory management, e-commerce, or reporting purposes.\n\n### 4. Common Query Patterns (Assuming Data Correction)\n\nAfter data correction and potentially adding a primary key, the following queries become feasible:\n\n1. **Retrieve product information by ID:**  `SELECT * FROM pdf_e9b330d7_product_category WHERE product_id = 123;`\n2. **Retrieve all products in a specific category:** `SELECT * FROM pdf_e9b330d7_product_category WHERE category = 'Electronics';`\n3. **Count the number of products in each category:** `SELECT category, COUNT(*) FROM pdf_e9b330d7_product_category GROUP BY category;`\n\n### 5. Data Characteristics\n\n* **Total Number of Records:** 4 (Currently)\n* **Notable Data Patterns or Relationships:**  Currently, no clear relationship is observable due to the inconsistent sample data.  Once cleaned, a one-to-many relationship between categories and products is expected (many products can belong to the same category).\n\n**Conclusion:**\n\nThe `pdf_e9b330d7_product_category` table requires significant data cleanup and schema review before it can be reliably used for generating SQL queries. The sample data needs to be corrected, and a primary key should be added for data integrity.  Only then will the intended query patterns become fully functional.  The LLM should be cautious and flag inconsistencies when interacting with this table.",
    "pdf_uuid": "e9b330d7",
    "created_at": "2025-06-28T18:53:08.354388",
    "status": "complete",
    "rows_stored": 4
  },
  "pdf_0d44fd17_employee_information": {
    "schema": {
      "ID": "integer",
      "Name": "string",
      "Age": "integer",
      "City": "string",
      "Occupation": "string",
      "Salary": "currency"
    },
    "description": "## Table Description: `pdf_0d44fd17_employee_information`\n\nThis document describes the `pdf_0d44fd17_employee_information` table to facilitate accurate SQL query generation by an LLM.\n\n\n### 1. Table Metadata\n\n* **Table Name:** `pdf_0d44fd17_employee_information`\n* **Table Purpose:** Stores information about employees.\n* **Columns:**\n    * `ID` (INT): Unique identifier for each employee record.  Serves as the primary key.\n    * `Name` (VARCHAR(255)): Employee's full name.\n    * `Age` (INT): Employee's age in years.\n    * `City` (VARCHAR(255)): City where the employee resides.\n    * `Occupation` (VARCHAR(255)): Employee's job title or occupation.\n    * `Salary` (FLOAT): Employee's annual salary (parsed from currency strings, e.g., \"$80,000\").\n* **Key Identifier Columns:** `ID` (Primary Key)\n\n\n### 2. Sample Data Context\n\nThe sample data represents a small subset (10 rows) of employee records.  Each row contains details about a single employee, including their unique ID, name, age, city of residence, occupation, and annual salary.  The salary is stored as a floating-point number after currency symbol removal and parsing.  The data is generally well-formatted and consistent.\n\n\n### 3. Table Purpose\n\n* **Representation:** This table represents a collection of employee records.\n* **Business Function:** This table is used to store and manage employee information for various HR and business analytics purposes.  It can be used for reporting, payroll processing, compensation analysis, and other related tasks.\n\n\n### 4. Common Query Patterns\n\n* **Retrieve employee information:**  Selecting specific employee details (e.g., name, age, salary) based on ID or other criteria (e.g.,  `SELECT Name, Age, Salary FROM pdf_0d44fd17_employee_information WHERE ID = 5;`).\n* **Filter employees based on criteria:**  Selecting employees meeting specific conditions (e.g.,  `SELECT * FROM pdf_0d44fd17_employee_information WHERE City = 'New York' AND Age > 30;`).\n* **Aggregate employee data:** Calculating aggregate statistics (e.g., average salary, number of employees in a specific city) (e.g., `SELECT AVG(Salary) AS AverageSalary FROM pdf_0d44fd17_employee_information;` or `SELECT COUNT(*) FROM pdf_0d44fd17_employee_information WHERE Occupation = 'Engineer';`).\n\n\n### 5. Data Characteristics\n\n* **Total Number of Records:** 10 (in the sample data provided; the actual number may be larger).\n* **Notable Data Patterns/Relationships:** The data appears to be relatively clean and consistent.  There is a clear one-to-one relationship between the `ID` column and each employee record.  No obvious patterns or relationships are immediately visible in the small sample provided, but further analysis on a larger dataset might reveal correlations between age, occupation, and salary.  The data does not seem to contain any null values (in the sample).  Further analysis is required to ascertain any other characteristics.\n\n\nThis comprehensive description should enable an LLM to understand the structure, content, and intended use of the `pdf_0d44fd17_employee_information` table, facilitating the generation of accurate and relevant SQL queries.",
    "pdf_uuid": "0d44fd17",
    "created_at": "2025-06-28T18:55:52.196354",
    "status": "complete",
    "rows_stored": 10
  },
  "pdf_0d44fd17_product_inventory": {
    "schema": {
      "Serial No": "integer",
      "Product": "string",
      "Category": "string",
      "Price": "currency",
      "Stock": "integer"
    },
    "description": "## Table Description: pdf_0d44fd17_product_inventory\n\nThis document provides a comprehensive description of the `pdf_0d44fd17_product_inventory` table to facilitate accurate SQL query generation by an LLM.\n\n### 1. Table Metadata\n\n* **Table Name:** `pdf_0d44fd17_product_inventory`\n* **Table Purpose:** This table stores information about products in an inventory.  It tracks product details, category, price, and stock levels.\n* **Columns:**\n    * `Serial No` (INT):  A unique serial number identifying each product record.  This is implicitly the primary key.\n    * `Product` (VARCHAR(255)): The name of the product.\n    * `Category` (VARCHAR(255)): The category to which the product belongs.\n    * `Price` (FLOAT): The price of the product.  Values are stored as floats after parsing currency symbols (e.g., '$').\n    * `Stock` (INT): The current stock quantity of the product.\n* **Key Identifier Columns:** `Serial No` serves as the primary key, uniquely identifying each product record.\n\n\n### 2. Sample Data Context\n\nThe sample data provides a snapshot of the product inventory, showing a selection of products with their associated serial number, name, category, price, and stock quantity.  The data suggests a relatively small inventory with a range of product prices.\n\n* **Data Format:** The data is structured in a tabular format with each row representing a single product.\n* **Typical Values:**\n    * `Serial No`:  Sequential integers starting from 1.\n    * `Product`:  Text strings identifying individual products (e.g., \"Product 1\", \"Product 96\").\n    * `Category`:  Text strings representing product categories (e.g., \"Category A\", \"Category B\").\n    * `Price`: Floating-point numbers representing product prices in currency units (e.g., 10.00, 960.00).\n    * `Stock`: Integer values indicating the number of units in stock (e.g., 99, 4).\n\n\n### 3. Table Purpose\n\n* **What it Represents:**  A catalog of products and their inventory levels.\n* **Main Use Case/Business Function:**  This table supports inventory management functions.  It's used to track product availability, monitor stock levels, and inform pricing and purchasing decisions.\n\n\n### 4. Common Query Patterns\n\n* **Retrieving product information:** Selecting specific product details based on criteria like product name, category, or price range (e.g., `SELECT * FROM pdf_0d44fd17_product_inventory WHERE Category = 'Category A'`).\n* **Checking stock levels:** Querying the stock quantity for specific products or categories (e.g., `SELECT Product, Stock FROM pdf_0d44fd17_product_inventory WHERE Stock < 10`).\n* **Aggregating inventory data:** Calculating the total stock value for a particular category or across the entire inventory (e.g., `SELECT SUM(Price * Stock) FROM pdf_0d44fd17_product_inventory WHERE Category = 'Category B'`).\n\n\n### 5. Data Characteristics\n\n* **Total Number of Records:** 96\n* **Notable Data Patterns/Relationships:** The `Serial No` uniquely identifies each product.  There's a relationship between the `Product`, `Category`, `Price`, and `Stock` columns, all describing attributes of a single product.  The sample data suggests a potential uneven distribution of products across categories.  Further analysis of a larger dataset might reveal more patterns or relationships.\n\n\nThis detailed description should provide an LLM with sufficient information to understand the structure, purpose, and typical usage of the `pdf_0d44fd17_product_inventory` table, enabling it to generate accurate and relevant SQL queries.",
    "pdf_uuid": "0d44fd17",
    "created_at": "2025-06-28T18:56:00.797731",
    "status": "complete",
    "rows_stored": 96
  },
  "pdf_0d44fd17_product_categories": {
    "schema": {
      "product_id": "integer",
      "product_name": "string",
      "category": "string"
    },
    "description": "## Table Description: pdf_0d44fd17_product_categories\n\nThis document describes the `pdf_0d44fd17_product_categories` table to facilitate accurate SQL query generation by an LLM.  The provided sample data is flawed and does not reflect a typical product category table structure.  The description below assumes the sample data is corrupted and offers a corrected interpretation.\n\n\n### 1. Table Metadata\n\n* **Table Name:** `pdf_0d44fd17_product_categories`\n* **Table Purpose:** To store the categorization of products.  Each row represents a product and its associated category.\n* **Columns:**\n    * `product_id`: `INT` - Unique identifier for each product.  This is assumed to be the primary key.\n    * `product_name`: `VARCHAR(255)` - The name of the product.\n    * `category`: `VARCHAR(255)` - The category to which the product belongs.\n\n* **Key Identifier Columns:** `product_id` (Primary Key \u2013 assumed)\n\n\n### 2. Sample Data Context\n\nThe provided sample data is inconsistent and likely erroneous.  It mixes product IDs, product names, and seemingly price values within the same row.  A corrected interpretation is presented below.  The sample data should be:\n\n**Corrected Sample Data (Assumed):**\n\n| product_id | product_name | category      |\n|-------------|---------------|----------------|\n| 1           | Widget A      | Electronics     |\n| 2           | Gadget B      | Gadgets        |\n| 3           | Tool C        | Hardware       |\n| 4           | Software X    | Software       |\n\n\n**Data Format and Typical Values:**\n\n* `product_id`: Integer values representing unique product identifiers.\n* `product_name`:  Text strings representing product names.\n* `category`: Text strings representing product categories (e.g., \"Electronics,\" \"Clothing,\" \"Food\").\n\n\n### 3. Table Purpose\n\n* **Table Representation:** This table represents a product catalog, specifically the categorization of products.\n* **Main Use Case/Business Function:**  It's used to link products to their respective categories, allowing for efficient filtering, searching, and reporting based on product categories.\n\n\n### 4. Common Query Patterns\n\n* **Query Type 1: Retrieve products within a specific category:**\n    sql\n    SELECT * FROM pdf_0d44fd17_product_categories WHERE category = 'Electronics';\n    \n\n* **Query Type 2: Count the number of products in each category:**\n    sql\n    SELECT category, COUNT(*) AS product_count FROM pdf_0d44fd17_product_categories GROUP BY category;\n    \n\n* **Query Type 3: Find product details for a given product ID:**\n    sql\n    SELECT * FROM pdf_0d44fd17_product_categories WHERE product_id = 3;\n    \n\n### 5. Data Characteristics\n\n* **Total Number of Records:** 4 (based on corrected assumption)\n* **Notable Data Patterns/Relationships:**  A one-to-many relationship is assumed between products and categories; a single product will only belong to one category. The `product_id` is expected to be unique.\n\n**Important Note:** The LLM should be aware that the originally provided sample data was flawed and should not be directly used for query generation without correction or clarification.  The corrected sample data and descriptions are provided to illustrate the intended table structure and functionality.  The LLM should handle potential inconsistencies in data gracefully.",
    "pdf_uuid": "0d44fd17",
    "created_at": "2025-06-28T18:56:11.790632",
    "status": "complete",
    "rows_stored": 4
  }
}