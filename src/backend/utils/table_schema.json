{
  "pdf_8a27b9ae_employee_data": {
    "schema": {
      "ID": "integer",
      "Name": "string",
      "Age": "integer",
      "City": "string",
      "Occupation": "string",
      "Salary": "currency"
    },
    "description": "## Table Description: `pdf_8a27b9ae_employee_data`\n\nThis document provides a comprehensive description of the `pdf_8a27b9ae_employee_data` table to facilitate accurate SQL query generation by an LLM.\n\n\n### 1. Table Metadata\n\n* **Table Name:** `pdf_8a27b9ae_employee_data`\n* **Table Purpose:**  To store information about employees.\n* **Columns:**\n    * `ID` (INT): Unique identifier for each employee record.  Serves as the primary key.\n    * `Name` (VARCHAR(255)): Employee's full name.\n    * `Age` (INT): Employee's age in years.\n    * `City` (VARCHAR(255)): City where the employee resides.\n    * `Occupation` (VARCHAR(255)): Employee's job title or occupation.\n    * `Salary` (FLOAT): Employee's annual salary (parsed from currency strings, e.g., \"$80,000\").\n* **Key Identifier Columns:** `ID` (Primary Key)\n\n\n### 2. Sample Data Context\n\nThe sample data shows a small subset (10 rows) of employee records. Each row represents a single employee with their ID, name, age, city of residence, occupation, and annual salary.  The salary is stored as a floating-point number after currency symbol removal and parsing.\n\n* **Data Format:**  Each column holds data of the specified type.  `Salary` is a floating-point number representing the annual salary, originally in the format \"$XXX,XXX\".\n* **Typical Values:**  `ID` is a sequential integer.  `Name` contains strings. `Age` contains positive integers representing ages. `City` and `Occupation` contain text strings. `Salary` contains positive floating-point numbers.\n\n\n### 3. Table Purpose\n\n* **Table Representation:** This table represents a list of employees and their associated attributes.\n* **Main Use Case:**  The primary use case is to store and retrieve employee information for various reporting, analysis, and operational needs (e.g., payroll, HR management, compensation analysis).\n\n\n### 4. Common Query Patterns\n\n* **Retrieve Employee Information:**  Selecting specific employee details based on ID, name, or other criteria (e.g., `SELECT * FROM pdf_8a27b9ae_employee_data WHERE ID = 5;` or `SELECT Name, Salary FROM pdf_8a27b9ae_employee_data WHERE City = 'New York';`).\n* **Aggregate Statistics:** Calculating summary statistics, such as average salary, maximum age, or number of employees in a specific city (e.g., `SELECT AVG(Salary) FROM pdf_8a27b9ae_employee_data;` or `SELECT COUNT(*) FROM pdf_8a27b9ae_employee_data WHERE Occupation = 'Engineer';`).\n* **Filtering and Sorting:** Retrieving employees matching specific criteria and sorting the results (e.g., `SELECT * FROM pdf_8a27b9ae_employee_data WHERE Age > 30 ORDER BY Salary DESC;`).\n\n\n### 5. Data Characteristics\n\n* **Total Number of Records:** 10 (in the sample; the actual number may be larger).\n* **Notable Data Patterns:** The data shows a variety of occupations and salaries. There is no immediately apparent correlation between age and salary, though further analysis might reveal patterns.  The `ID` column is sequentially numbered, suggesting an insertion order.  There's no information on potential relationships with other tables (e.g., a department table).",
    "pdf_uuid": "8a27b9ae",
    "created_at": "2025-06-28T18:31:14.345031",
    "status": "complete",
    "rows_stored": 10
  },
  "pdf_8a27b9ae_product_inventory": {
    "schema": {
      "Serial No": "integer",
      "Product": "string",
      "Category": "string",
      "Price": "currency",
      "Stock": "integer"
    },
    "description": "## Table Description: `pdf_8a27b9ae_product_inventory`\n\n### 1. Table Metadata\n\n* **Table Name:** `pdf_8a27b9ae_product_inventory`\n* **Table Purpose:** This table stores information about products in an inventory.\n* **Column Names and Data Types:**\n    * `Serial No` (INT):  A unique sequential identifier for each product entry.  This is implicitly a primary key.\n    * `Product` (VARCHAR(255)): The name of the product.\n    * `Category` (VARCHAR(255)): The category the product belongs to.\n    * `Price` (FLOAT): The price of the product (parsed from currency symbols, likely including the dollar sign '$' in the source data).\n    * `Stock` (INT): The number of units currently in stock.\n\n* **Key Identifier Columns:** `Serial No` acts as the primary key, uniquely identifying each product record.\n\n\n### 2. Sample Data Context\n\nThe sample data shows a small excerpt from a product inventory.  Each row represents a single product with its serial number, name, category, price, and stock quantity. The provided `Price` column already has currency symbols removed and converted to a numerical value.\n\n* **Data Format:**  The data is structured in a tabular format with each column representing an attribute of a product.\n* **Typical Values:**\n    * `Serial No`: Sequential integers starting from 1.\n    * `Product`:  String values representing product names (e.g., \"Product 1\", \"Product 96\").\n    * `Category`: String values representing product categories (e.g., \"Category A\", \"Category B\").\n    * `Price`: Floating-point numbers representing the price of each product.\n    * `Stock`: Integer values representing the quantity of each product in stock.\n\n\n### 3. Table Purpose\n\n* **What this table represents:**  A product catalog with inventory levels.\n* **Main use case or business function:** This table supports inventory management, allowing for tracking of product details, prices, and stock levels.  It is crucial for tasks such as order fulfillment, stock replenishment, and sales reporting.\n\n\n### 4. Common Query Patterns\n\n* **Query Type 1: Retrieving product information:**  Select specific product details (e.g., name, price, stock) based on criteria like product name or category.  Example:  `SELECT Product, Price, Stock FROM pdf_8a27b9ae_product_inventory WHERE Category = 'Category A';`\n* **Query Type 2:  Finding low-stock items:** Identify products with stock levels below a certain threshold. Example: `SELECT Product, Stock FROM pdf_8a27b9ae_product_inventory WHERE Stock < 10;`\n* **Query Type 3: Calculating total value of inventory:** Aggregate the value of all products in stock. Example: `SELECT SUM(Price * Stock) AS TotalInventoryValue FROM pdf_8a27b9ae_product_inventory;`\n\n\n### 5. Data Characteristics\n\n* **Total number of records:** 96\n* **Notable data patterns or relationships:** The `Serial No` acts as a unique identifier.  There's a likely relationship with other tables (potentially sales data or order tables) that would use the `Product` or `Serial No` as a foreign key for linking information about sales or orders related to each specific product.  The distribution of products across categories isn't known without further analysis, which might reveal meaningful patterns.  It's assumed that `Price` values are consistently positive.",
    "pdf_uuid": "8a27b9ae",
    "created_at": "2025-06-28T18:31:23.254898",
    "status": "complete",
    "rows_stored": 96
  },
  "pdf_8a27b9ae_product_categories": {
    "schema": {
      "product_id": "integer",
      "product_name": "string",
      "category": "string"
    },
    "description": "## Table Description: `pdf_8a27b9ae_product_categories`\n\n### 1. Table Metadata\n\n* **Table Name:** `pdf_8a27b9ae_product_categories`\n* **Table Purpose:**  This table is intended to store information about product categories. However, the provided sample data suggests significant data inconsistencies and a flawed design.  The intended purpose is unclear from the sample data and likely requires correction.\n* **Columns:**\n    * `product_id`: INT (Whole numbers).  Intended to uniquely identify a product.  The sample data shows this is not working as intended.\n    * `product_name`: VARCHAR(255) (Text data). Intended to store the name of a product. The sample data contains values that are not product names.\n    * `category`: VARCHAR(255) (Text data). Intended to store the category to which a product belongs. The sample data contains values that are not product categories.\n* **Key Identifier Columns:**  Ideally, `product_id` should be the primary key, uniquely identifying each product.  However, based on the sample data, this is not currently enforced.\n\n\n### 2. Sample Data Context\n\nThe provided sample data is highly problematic and inconsistent. It doesn't represent a coherent relationship between product IDs, names, and categories. The rows seem to contain different types of data intermingled:\n\n* **Row 1:** Appears to be attempting to assign product IDs (but uses non-numeric 'Product' prefix).\n* **Row 2:** Appears to be attempting to assign category names.\n* **Row 3:** Contains currency values, which are inappropriate for product IDs or names.\n* **Row 4:** Contains numerical data that *could* represent product IDs, but lacks names and categories.\n\nThe data format is inconsistent, mixing strings, numbers, and currency symbols, resulting in a table that is unusable in its current state.\n\n### 3. Table Purpose (Corrected based on intended schema)\n\n**Intended Purpose (Based on Schema):**  This table *should* represent a catalog of products and their associated categories.  It aims to link each product with a specific category for organization and analysis.\n\n**Main Use Case (Ideal):** The main use cases would involve retrieving product information based on ID or category, analyzing product distributions across categories, and potentially joining with other tables (e.g., a sales table) for reporting purposes.\n\n### 4. Common Query Patterns (Ideal, based on corrected table)\n\nThe following queries would be useful *if* the data were cleaned and consistent:\n\n1. **Retrieve products in a specific category:**\n   sql\n   SELECT product_id, product_name\n   FROM pdf_8a27b9ae_product_categories\n   WHERE category = 'Category A';\n   \n\n2. **Count products per category:**\n   sql\n   SELECT category, COUNT(*) AS product_count\n   FROM pdf_8a27b9ae_product_categories\n   GROUP BY category;\n   \n\n3. **Find product details by ID:**\n   sql\n   SELECT product_name, category\n   FROM pdf_8a27b9ae_product_categories\n   WHERE product_id = 123;\n   \n\n\n### 5. Data Characteristics\n\n* **Total Number of Records:** 4 (Currently). This is extremely low for a real-world product catalog.\n* **Notable Data Patterns/Relationships:** Currently, there are no meaningful patterns or relationships due to the inconsistent data.  Ideally, a one-to-many relationship would exist between `product_id` and rows in other tables (e.g., sales data, inventory).  A one-to-one relationship between `product_id` and `product_name` should also exist.\n\n\n**Conclusion:** This table requires significant data correction and cleaning before it can be effectively used. The sample data prevents accurate query generation.  The LLM should be alerted to the data quality issues and potentially prompted to assist in data cleaning or reconstruction before generating queries.  A primary key constraint needs to be added on the `product_id` column.",
    "pdf_uuid": "8a27b9ae",
    "created_at": "2025-06-28T18:31:33.841909",
    "status": "complete",
    "rows_stored": 4
  }
}